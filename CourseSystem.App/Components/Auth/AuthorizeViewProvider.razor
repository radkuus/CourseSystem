@using CourseSystem.App.Services
@using CourseSystem.App.Models
@implements IDisposable
@inject AuthenticationService AuthService
@inject NavigationManager Navigation

<CascadingValue Value="@_authState">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</CascadingValue>

@code {
    // Reszta kodu pozostaje bez zmian...
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private AuthState _authState = new();
    private Timer? _timer;

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
        CheckAuth();

        _timer = new Timer(_ =>
        {
            InvokeAsync(() =>
            {
                CheckAuth();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        CheckAuth();
        InvokeAsync(StateHasChanged);
    }

    private void CheckAuth()
    {
        try
        {
            var result = AuthService.CheckAuth();
            _authState.IsAuthenticated = result.IsAuthenticated;
            _authState.User = result.User;
        }
        catch
        {
            _authState.IsAuthenticated = false;
            _authState.User = null;
        }
    }

    public void RefreshAuthState()
    {
        CheckAuth();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        _timer?.Dispose();
    }

    public class AuthState
    {
        public bool IsAuthenticated { get; set; }
        public UserInfo? User { get; set; }
    }
}